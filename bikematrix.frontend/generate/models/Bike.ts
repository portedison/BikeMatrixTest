/* tslint:disable */
/* eslint-disable */
/**
 * BikeMatrix API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Brand } from './Brand';
import {
    BrandFromJSON,
    BrandFromJSONTyped,
    BrandToJSON,
} from './Brand';
import type { User } from './User';
import {
    UserFromJSON,
    UserFromJSONTyped,
    UserToJSON,
} from './User';

/**
 * 
 * @export
 * @interface Bike
 */
export interface Bike {
    /**
     * 
     * @type {number}
     * @memberof Bike
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Bike
     */
    model?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Bike
     */
    year?: number;
    /**
     * 
     * @type {number}
     * @memberof Bike
     */
    ownerId?: number;
    /**
     * 
     * @type {User}
     * @memberof Bike
     */
    owner?: User;
    /**
     * 
     * @type {number}
     * @memberof Bike
     */
    brandId?: number;
    /**
     * 
     * @type {Brand}
     * @memberof Bike
     */
    brand?: Brand;
}

/**
 * Check if a given object implements the Bike interface.
 */
export function instanceOfBike(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BikeFromJSON(json: any): Bike {
    return BikeFromJSONTyped(json, false);
}

export function BikeFromJSONTyped(json: any, ignoreDiscriminator: boolean): Bike {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'model': !exists(json, 'model') ? undefined : json['model'],
        'year': !exists(json, 'year') ? undefined : json['year'],
        'ownerId': !exists(json, 'ownerId') ? undefined : json['ownerId'],
        'owner': !exists(json, 'owner') ? undefined : UserFromJSON(json['owner']),
        'brandId': !exists(json, 'brandId') ? undefined : json['brandId'],
        'brand': !exists(json, 'brand') ? undefined : BrandFromJSON(json['brand']),
    };
}

export function BikeToJSON(value?: Bike | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'model': value.model,
        'year': value.year,
        'ownerId': value.ownerId,
        'owner': UserToJSON(value.owner),
        'brandId': value.brandId,
        'brand': BrandToJSON(value.brand),
    };
}

