/* tslint:disable */
/* eslint-disable */
/**
 * BikeMatrix API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BikeCreateDTO,
  BikeDTO,
  BikeUpdateDTO,
} from '../models';
import {
    BikeCreateDTOFromJSON,
    BikeCreateDTOToJSON,
    BikeDTOFromJSON,
    BikeDTOToJSON,
    BikeUpdateDTOFromJSON,
    BikeUpdateDTOToJSON,
} from '../models';

export interface ApiBikesIdDeleteRequest {
    id: number;
}

export interface ApiBikesIdGetRequest {
    id: number;
}

export interface ApiBikesIdPutRequest {
    id: number;
    bikeUpdateDTO?: BikeUpdateDTO;
}

export interface ApiBikesPostRequest {
    bikeCreateDTO?: BikeCreateDTO;
}

/**
 * 
 */
export class BikesApi extends runtime.BaseAPI {

    /**
     */
    async apiBikesGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BikeDTO>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Bikes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BikeDTOFromJSON));
    }

    /**
     */
    async apiBikesGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BikeDTO>> {
        const response = await this.apiBikesGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async apiBikesIdDeleteRaw(requestParameters: ApiBikesIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiBikesIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Bikes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiBikesIdDelete(requestParameters: ApiBikesIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiBikesIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiBikesIdGetRaw(requestParameters: ApiBikesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BikeDTO>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiBikesIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Bikes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BikeDTOFromJSON(jsonValue));
    }

    /**
     */
    async apiBikesIdGet(requestParameters: ApiBikesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BikeDTO> {
        const response = await this.apiBikesIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiBikesIdPutRaw(requestParameters: ApiBikesIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiBikesIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Bikes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: BikeUpdateDTOToJSON(requestParameters.bikeUpdateDTO),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiBikesIdPut(requestParameters: ApiBikesIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiBikesIdPutRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiBikesPostRaw(requestParameters: ApiBikesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BikeDTO>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Bikes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BikeCreateDTOToJSON(requestParameters.bikeCreateDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BikeDTOFromJSON(jsonValue));
    }

    /**
     */
    async apiBikesPost(requestParameters: ApiBikesPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BikeDTO> {
        const response = await this.apiBikesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
